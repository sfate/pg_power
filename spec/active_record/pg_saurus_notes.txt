https://github.com/rails/rails/pull/4956
Per Bruce: Just disable the functionality for Rails 4+


schema_dumper_spec

        # verify that the dump includes standard add_index options
        @dump.should =~ /add_index "demography\.citizens", \["country_id", "user_id"\].*:unique => true/
        # verify that the dump includes pg_saurus add_index options
        @dump.should =~ /add_index "demography\.citizens", \["country_id", "user_id"\].*:where => "active"/


class AddDemographyCitizensActiveColumn < ActiveRecord::Migration
  def change
    add_column 'demography.citizens', :active, :boolean, :null => false, :default => false
  end
end


class AddFunctionalIndexToDemographyCitizens < ActiveRecord::Migration
  def change
    add_index 'demography.citizens', [:country_id, :user_id], :name => 'index_demography.citizens_on_country_id_and_user_id_and_active', :unique => true, :where => 'active'
  end
end


select
    pgi.schemaname as schema_name,
    t.relname as table_name,
    i.relname as index_name,
    array_to_string(array_agg(a.attname), ', ') as column_names
from
    pg_class t,
    pg_class i,
    pg_index ix,
    pg_attribute a,
    pg_indexes pgi
where
    t.oid = ix.indrelid
    and i.oid = ix.indexrelid
    and a.attrelid = t.oid
    and a.attnum = ANY(ix.indkey)
    and t.relkind = 'r'
    and pgi.indexname = i.relname
group by
    pgi.schemaname,
    t.relname,
    i.relname
order by
    pgi.schemaname,
    t.relname,
    i.relname;



 schema_name | table_name | index_name | column_names
------------+------------+------------+--------------
 demography  | test       | pk_test    | a, b
 test2       | test2      | uk_test2   | b, c
 test3       | test3      | uk_test3ab | a, b
 test3       | test3      | uk_test3b  | b
 test3       | test3      | uk_test3c  | c



Functional awesomeness:

pg_saurus_dummy_development=# explain select * from demography.citizens where country_id = 1 and user_id = 2 and active = true;
                                                            QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------
 Index Scan using index_demography_citizens_on_country_id_and_user_id_and_active on citizens  (cost=0.00..8.27 rows=1 width=1097)
   Index Cond: ((country_id = 1) AND (user_id = 2))
(2 rows)


pg_saurus_dummy_development=# explain select * from demography.citizens where country_id = 1 and user_id = 2 and active = false;
                                                QUERY PLAN
----------------------------------------------------------------------------------------------------------
 Index Scan using "index_demography.citizens_on_user_id" on citizens  (cost=0.00..8.27 rows=1 width=1097)
   Index Cond: (user_id = 2)
   Filter: ((NOT active) AND (country_id = 1))
(3 rows)











select * from information_schema.table_constraints limit 50;
select * from information_schema.key_column_usage limit 50;
select * from information_schema.constraint_column_usage limit 50;

select * from pg_catalog.pg_indexes where tablename = 'rule_sets' AND indexdef LIKE '%UNIQUE%' limit 50;
# WHERE i.schemaname = c.table_schema  AND i.tablename = c.table_name AND indexdef LIKE '%UNIQUE%'

SELECT c.table_schema, c.table_name, c.table_type
FROM information_schema.tables c
WHERE  c.table_schema NOT IN('information_schema', 'pg_catalog') AND c.table_type = 'BASE TABLE'
AND NOT EXISTS(SELECT i.tablename
        FROM pg_catalog.pg_indexes i
      WHERE i.schemaname = c.table_schema
        AND i.tablename = c.table_name AND indexdef LIKE '%UNIQUE%')
AND
NOT EXISTS (SELECT cu.table_name
        FROM information_schema.key_column_usage cu
        WHERE cu.table_schema = c.table_schema AND
          cu.table_name = c.table_name)
ORDER BY c.table_schema, c.table_name;



SELECT relname
FROM pg_class
WHERE oid IN (
  SELECT indexrelid
  FROM pg_index, pg_class
  WHERE pg_class.relname='test2'
  AND pg_class.oid=pg_index.indrelid
  AND indisunique != 't'
  AND indisprimary != 't'
);


select
    t.relname as table_name,
    i.relname as index_name,
    array_to_string(array_agg(a.attname), ', ') as column_names
from
    pg_class t,
    pg_class i,
    pg_index ix,
    pg_attribute a
where
    t.oid = ix.indrelid
    and i.oid = ix.indexrelid
    and a.attrelid = t.oid
    and a.attnum = ANY(ix.indkey)
    and t.relkind = 'r'
    and t.relname like 'test%'
group by
    t.relname,
    i.relname
order by
    t.relname,
    i.relname;





Indexes:
    "customers_pkey" PRIMARY KEY, btree (id)
    "index_customers_on_customer_status_id" btree (customer_status_id)
Foreign-key constraints:
    "customers_customer_status_id_fk" FOREIGN KEY (customer_status_id) REFERENCES customer_statuses(id)
    "customers_person_name_id_fk" FOREIGN KEY (person_name_id) REFERENCES person_names(id)





 select
    pgi.schemaname as schema_name,
    t.relname as table_name,
    i.relname as index_name,
    array_to_string(array_agg(a.attname), ', ') as column_names
from
    pg_class t,
    pg_class i,
    pg_index ix,
    pg_attribute a,
    pg_indexes pgi
where
    t.oid = ix.indrelid
    and i.oid = ix.indexrelid
    and a.attrelid = t.oid
    and a.attnum = ANY(ix.indkey)
    and t.relkind = 'r'
    and pgi.indexname = i.relname
group by
    pgi.schemaname,
    t.relname,
    i.relname
order by
    pgi.schemaname,
    t.relname,
    i.relname;
